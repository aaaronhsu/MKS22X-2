Bronze
First, you have to read in the input. Store the map of the input a 2d int array we will call "board".
Read in each stomping instruction as (x, y). 
For each stomping instruction:
  Use a double for loop to loop through the mini rectangle from (x, y) to (x + 2, y + 2). Ignore the space if it is out of the bounds of the board.
  Record the largest number in the mini rectangle. Call this variable max.
  Loop over the mini rectangle again and update any value that is greater than (max - # of stomps) to be (max - # of stomps). If board[x][y] < 0, set it to be 0.
Loop through the board and calculate the aggregate depth of the board by adding (water depth - board[x][y]) to a running count if board[x][y] < water depth.
The answer is the aggregate depth * 5184.
Runtime of O(RC + N)


Silver
Read in the input, storing whether or not a place is a wall using a 2d boolean array called "board".
Create a 2d int array to hold the answer called dp, setting dp[x][y] to 1 given that (x, y) is the starting coordinate.
Create a double for loop that runs t times.
  Create a temporary 2d int array (this will build on the current dp array).
  If there is no wall at (x, y), then increment ans[x][y] by dp[x + 1][y], dp[x - 1][y], dp[x][y + 1], dp[x][y - 1] if such spaces exist.
The answer is dp[finalXPos][finalYPos].
Runtime of O(NMT)